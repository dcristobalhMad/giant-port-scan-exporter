name: "Release"

on:
  push:
    branches: [master]

jobs:
  push_image_to_registry:
    name: Push Docker image to Docker Hub
    needs: [tag]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: "Determine tag"
        run: 'echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        id: build-and-push
        with:
          push: true
          tags: dcristobal/port-scan-exporter:latest,dcristobal/port-scan-exporter:${{ env.RELEASE_TAG }}

  push_chart_to_registry:
    name: Push Helm chart to Docker Hub OCI
    runs-on: ubuntu-latest
    needs: [push_image_to_registry]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: "Determine tag"
        run: 'echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV'

      - name: Login, package and push Helm Chart
        run: bash .github/hacks/oci-actions.sh
        env:
          TAG: ${{ env.RELEASE_TAG }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  release:
    name: "Release"

    runs-on: "ubuntu-latest"

    needs: [push_chart_to_registry]
    steps:
      - name: "Determine tag"
        run: 'echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV'

      # https://github.com/actions/checkout
      - uses: actions/checkout@v3

      - name: "Create release"
        uses: "actions/github-script@v5"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
